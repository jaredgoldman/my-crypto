// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exchange {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @unique
  displayName      String
  url              String
  image            String
  status           Status             @default(ACTIVE)
  userExchanges    UserExchange[]
  UserExchangeKey  UserExchangeKey[]
  ExchangeCurrency ExchangeCurrency[]
}

// TODO: Create seperate table for hashed user secrets
model User {
  id              String            @id @default(uuid()) @db.Uuid
  email           String            @unique
  name            String
  status          Status            @default(INACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userExchanges   UserExchange[]
  UserExchangeKey UserExchangeKey[]
  Trade           Trade[]
  CoinAccount     CoinAccount[]
}

model UserSecret {
  id        String   @id @default(uuid())
  userId    String   @unique @db.Uuid
  secret    String
  status    Status   @default(ACTIVE)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum Status {
  ACTIVE
  INACTIVE
}

model UserExchange {
  id                String          @id @default(uuid()) @db.Uuid
  userExchangeKey   UserExchangeKey @relation(fields: [userExchangeKeyId], references: [id])
  userExchangeKeyId String          @unique @db.Uuid
  User              User            @relation(fields: [userId], references: [id])
  userId            String          @db.Uuid
  exchange          Exchange        @relation(fields: [exchangeId], references: [id])
  exchangeId        String          @db.Uuid
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            Status          @default(ACTIVE)
  Trade             Trade[]
  CoinAccount       CoinAccount[]
}

model UserExchangeKey {
  id           String        @id @default(uuid()) @db.Uuid
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.Uuid
  exchange     Exchange      @relation(fields: [exchangeId], references: [id])
  exchangeId   String        @db.Uuid
  key          String
  keyIv        String
  secret       String
  secretIv     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       Status        @default(ACTIVE)
  userExchange UserExchange?
}

model Trade {
  amount         Float
  datetime       String
  id             String        @unique
  info           Json
  order          String?
  price          Float
  timestamp      DateTime
  type           String?
  side           Side
  symbol         String
  takerOrMaker   TakerOrMaker?
  cost           Float
  fee            Json
  fees           Json
  exchangeName   String
  UserExchange   UserExchange? @relation(fields: [userExchangeId], references: [id])
  userExchangeId String?       @db.Uuid
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.Uuid
}

model CoinAccount {
  id             String        @id @default(uuid()) @db.Uuid
  coin           String
  free           Float?
  used           Float?
  total          Float
  UserExchange   UserExchange? @relation(fields: [userExchangeId], references: [id])
  userExchangeId String?       @db.Uuid
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.Uuid

  @@unique([coin, userId])
}

model ExchangeCurrency {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  code         String       @unique
  info         Json
  active       Boolean
  deposit      Boolean?
  withdraw     Boolean?
  fee          Float?
  precision    Float?
  limits       Json
  currencyType CurrencyType
  exchange     Exchange     @relation(fields: [exchangeId], references: [id])
  exchangeId   String       @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum CurrencyType {
  FIAT
  CRYPTO
}

enum Side {
  buy
  sell
}

enum TakerOrMaker {
  taker
  maker
}
